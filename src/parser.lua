local scan = require "src.scanner"
local json = require "lib.json"

local current, pop, peek ---@type Lexeme, NextLexeme, CurrentLexeme
local parseExpression, parseStatement ---@type ExpressionParser, StatementParser
local escapedCharacters <const> = { [116] = "\\t", [92] = "\\\\", [34] = "\\\"", [98] = "\\b", [102] = "\\f", [110] = "\\n", [114] = "\\r", [39] = "\\\'" }

--- Throw a local error.
---@param message string The error message.
local function throw (message, line)
	io.write("<mosaic> ", line or current.line, ": ", message, ".\n")
	os.exit()
end

--- Move on to the next lexeme, store the current one in the 'current' table.
---@return string typeof The lexeme type.
---@return string value The lexeme value.
---@return number line The line number.
local function consume ()
	local typeof, value, line = pop()
	current.typeof, current.value, current.line = peek()
	return typeof, value or "<eof>", line
end

--- Expect a specific lexeme(s) from the scanner, throw an error when not found.
---@param message? string The error message.
---@param ... string The expected types.
local function expect (message, ...)
	local lookup = {}
	for _, expected in ipairs({...}) do lookup[expected] = true end
	local typeof, value, line = consume()
	if not lookup[typeof] then
		throw(message .. " near '" .. value .. "'", line)
	end
	return value
end

--- Suppose a specific lexeme(s) from the scanner, consume it when found, do nothing otherwise.
---@param ... string The supposed lexeme types.
---@return string? #The supposed lexeme value.
local function suppose (...)
	local lookup = {}
	for _, expected in ipairs({...}) do lookup[expected] = true end
	local typeof, value = peek()
	if lookup[typeof] then
		consume()
		return value
	end
end

--- Check the kind of a node generated by a parsing function, throw an error when there's a mismatch.
---@param message? string The error message.
---@param parseFunc function The node to check.
---@param ... string The expected kind.
---@return StatementExpression #The expected lexeme value.
local function catch (message, parseFunc, ...)
	local value, lookup = current.value, {}
	for _, expected in ipairs({...}) do lookup[expected] = true end
	local node = parseFunc() --[[@as StatementExpression]]
	if not lookup[node.kindof] then
		throw(message .. " near '" .. value .. "'")
	end
	return node
end

---@return Term?
local function parseTerm ()
	local typeof, value = consume()
	-- UnaryExpressions
	if typeof == "Minus" or typeof == "Dollar" or typeof == "Pound" or typeof == "Bang" then
		return { kindof = "UnaryExpression", operator = value, argument = parseExpression() }
	-- Identifiers
	elseif typeof == "Identifier" then
		return { kindof = "Identifier", value = value }
	-- Strings
	elseif typeof == "String" then
		value = value:gsub("\\(%d%d%d)", function (d) return escapedCharacters[tonumber(d)] end)
		return { kindof = "StringLiteral", value = value }
	-- Numbers
	elseif typeof == "Number" then
		return { kindof = "NumberLiteral", value = tonumber(value) }
	elseif typeof == "Hexadecimal" then
		return { kindof = "NumberLiteral", value = tonumber(value, 16) }
	-- Booleans
	elseif typeof == "Boolean" then
		return { kindof = "BooleanLiteral", value = value }
	-- Undefined or Ellipsis
	elseif typeof == "Undefined" then
		return { kindof = typeof }
	elseif typeof == "Ellipsis" then
		return { kindof = "Ellipsis", value = value }
	-- Parenthesized expressions
	elseif typeof == "LeftParenthesis" then
		local node = parseExpression() --[[@as Expression]]
		expect("')' expected", "RightParenthesis")
		return { kindof = "ParenthesizedExpression", node = node }
	end
	-- Unknown
	throw("unexpected symbol near '" .. value .. "'")
end

---@return MemberExpression
local function parseMemberExpression ()
	local record = parseTerm() --[[@as Term]]
	while current.typeof == "Dot" or current.typeof == "LeftBracket"  do
		local property, computed ---@type Expression, boolean
		local typeof, value = consume()
		if typeof == "Dot" then
			property, computed = parseTerm(), false
			if not property or property.kindof ~= "Identifier" then
				throw("syntax error near '" .. value .. (property and property.value or "") .. "'")
			end
		else
			property, computed = parseExpression(), true
			expect("']' missing", "RightBracket")
		end
		record = { kindof = "MemberExpression", record = record, property = property, computed = computed } --[[@as MemberExpression]]
	end
	return record
end

---@param caller Expression
---@param instance Expression?
---@return CallExpression
local function parseCallExpression (caller, instance)
	local last = current.line
	while suppose "LeftParenthesis" do
		caller = { kindof = "CallExpression", caller = caller, arguments = { instance } } --[[@as CallExpression]]
		while current.typeof ~= "RightParenthesis" do
			caller.arguments[#caller.arguments + 1] = parseExpression()
			if not suppose("Comma") then
				break
			end
		end
		expect("')' expected (to close '(' at line " .. last .. ")", "RightParenthesis")
	end
	return caller
end

---@param caller Expression
---@return NewExpression
local function parseNewExpression (caller)
	caller = { kindof = "NewExpression", caller = caller, arguments = {} } --[[@as NewExpression]]
	while current.typeof ~= "RightBrace" do
		caller.arguments[#caller.arguments + 1] = parseExpression()
		suppose("Comma")
	end
	expect("'}' expected", "RightBrace")
	return caller
end

---@return NewExpression|CallExpression|MemberExpression
local function parseNewCallMemberExpression()
	local member = parseMemberExpression()
	if suppose "LeftBrace" then
		return parseNewExpression(member)
	elseif current.typeof == "LeftParenthesis" then
		return parseCallExpression(member)
	elseif suppose "Colon" then
		if (member.kindof == "MemberExpression" or member.kindof == "Identifier") then
			local property = catch("<name> expected", parseTerm, "Identifier") --[[@as Expression]]
			local caller = { kindof = "MemberExpression", record = member --[[@as Expression]], property = property, computed = false, instance = true }
			return parseCallExpression(caller, member)
		elseif (member.kindof == "StringLiteral") then
			---@cast member +StringLiteral
			member.key = true
			return member
		end
	end
	return member
end

---@return BinaryExpression
local function parseMultiplicativeExpression ()
	local left = parseNewCallMemberExpression()
	while current.typeof == "Asterisk" or current.typeof == "Slash" or current.typeof == "Circumflex" or current.typeof == "Percent" do
		local operator = current.value
		consume()
		left = { kindof = "BinaryExpression", left = left --[[@as Expression]], operator = operator, right = parseNewCallMemberExpression() --[[@as Expression]] } --[[@as BinaryExpression]]
	end
	return left
end

---@return BinaryExpression
local function parseAdditiveExpression ()
	local left = parseMultiplicativeExpression()
	while current.typeof == "Plus" or current.typeof == "Minus" do
		local operator = current.value
		consume()
		left = { kindof = "BinaryExpression", left = left --[[@as Expression]], operator = operator, right = parseMultiplicativeExpression() --[[@as Expression]] } --[[@as BinaryExpression]]
	end
	return left
end

---@return BinaryExpression
local function parseComparisonExpression ()
	local left = parseAdditiveExpression()
	while current.typeof == "IsEqual" or current.typeof == "Greater" or current.typeof == "Less"
		  or current.typeof == "GreaterEqual" or current.typeof == "LessEqual" or current.typeof == "NotEqual" do
		local operator = current.value
		consume()
		left = { kindof = "BinaryExpression", left = left --[[@as Expression]], operator = operator, right = parseAdditiveExpression() --[[@as Expression]] } --[[@as BinaryExpression]]
	end
	return left
end

---@return BinaryExpression
local function parseLogicalExpression ()
	local left = parseComparisonExpression()
	while current.typeof == "And" or current.typeof == "Or" or current.typeof == "Is" do
		local operator = current.value
		consume()
		left = { kindof = "BinaryExpression", left = left --[[@as Expression]], operator = operator, right = parseComparisonExpression() --[[@as Expression]] } --[[@as BinaryExpression]]
	end
	return left
end

---@return RecordLiteralExpression|BinaryExpression
local function parseRecordExpression ()
	if suppose "LeftBracket" then
		local elements = {} ---@type RecordElement[]
		while current.typeof ~= "RightBracket" do
			local key ---@type (Identifier|StringLiteral)?
			local value = parseExpression() --[[@as Expression]]
			if value.kindof == "StringLiteral" and value.key then
				if not (current.typeof == "Comma" or current.typeof == "RightBracket") then
					key = value
				end
			end
			elements[#elements + 1] = { kindof = "RecordElement", key = key, value = (key and parseExpression() or value) --[[@as Expression]] }
			suppose("Comma")
		end
		expect("']' expected", "RightBracket")
		return { kindof = "RecordLiteralExpression", elements = elements }
	end
	return parseLogicalExpression()
end

---@return Expression?
function parseExpression ()
	return parseRecordExpression()
end

---@return StatementExpression?
function parseStatement ()
	local decorations, export ---@type string[]?, boolean?
	while true do
		repeat
			local typeof, value, line = peek()
			-- Decorators
			if typeof == "At" then
				decorations = {} ---@type { [string]: true }
				while suppose "At" do
					local name = expect("<name> expected", "Identifier") --[[@as string]]
					decorations[name] = true
				end
				break
			-- Export
			elseif typeof == "Export" then
				consume()
				export = true
				break
			-- Comment
			elseif typeof == "Comment" then
				local content = {} ---@type string[]
				while current.typeof == "Comment" do
					content[#content + 1] = expect(nil, "Comment")
				end
				return { kindof = "Comment", content = content }
			-- ImportDeclaration
			elseif typeof == "Import" then
				consume()
				local names = suppose("Asterisk") or catch("<record> or <name> expected", parseRecordExpression, "RecordLiteralExpression", "Identifier") --[[@as RecordLiteralExpression|Identifier]]
				expect("'from' expected", "From")
				local filename = catch("<string> expected", parseTerm, "StringLiteral")
				return { kindof = "ImportDeclaration", names = names, filename = filename }
			-- VariableDeclaration
			elseif typeof == "Var" then
				consume()
				local declarations, identifiers = {}, {} ---@type AssignmentExpression[], Expression[]
				while current.typeof == "Identifier" or current.typeof == "LeftBracket" do
					local left = catch("<name> expected", parseExpression, "Identifier", "RecordLiteralExpression") --[[@as Identifier]]
					local right = suppose("Equal") and ((left.kindof == "RecordLiteralExpression") and catch("'<record> or '...' expected", parseExpression, "RecordLiteralExpression", "Ellipsis") or parseExpression()) --[[@as Expression]]
					declarations[#declarations + 1] = { kindof = "AssignmentExpression", left = left, operator = "=", right = right }
					if not suppose("Comma") then
						break
					end
				end
				return { kindof = "VariableDeclaration", declarations = declarations, decorations = decorations, export = export }
			-- FunctionDeclaration
			elseif typeof == "Function" then
				consume()
				local body, parameters = {}, {} ---@type BlockStatement[], Identifier[]
				local name = catch("<name> expected", parseMemberExpression, "Identifier", "MemberExpression") --[[@as Identifier|MemberExpression]]
				expect("'(' expected after <name>", "LeftParenthesis")
				while current.typeof == "Identifier" or current.typeof == "Ellipsis" do
					parameters[#parameters + 1] = catch("<name> expected", parseTerm, "Identifier", "Ellipsis")
					if not suppose("Comma") then
						break
					end
				end
				expect("')' expected", "RightParenthesis")
				while current.typeof ~= "End" do
					body[#body + 1] = parseStatement()
				end
				expect("'end' expected " .. string.format((current.line > line) and "(to close 'function' at line %s)" or "", line), "End")
				return { kindof = "FunctionDeclaration", name = name, parameters = parameters, body = body, decorations = decorations }
			-- ReturnStatement
			elseif typeof == "Return" then
				consume()
				local arguments = { parseExpression() } ---@type Expression[]
				while suppose "Comma" do
					arguments[#arguments + 1] = parseExpression()
				end
				return { kindof = "ReturnStatement", arguments = arguments }
			-- PrototypeDeclaration
			elseif typeof == "Prototype" then
				consume()
				local body, constructor = {}, false ---@type BlockStatement[], boolean
				local name = catch("<name> expected", parseMemberExpression, "Identifier", "MemberExpression") --[[@as Identifier|MemberExpression]]
				expect("Missing '{' after <name>", "LeftBrace")
				local parent = (current.typeof ~= "RightBrace") and parseExpression() or nil ---@type Expression?
				expect("Missing '}'", "RightBrace")
				while current.typeof ~= "End" do
					local last, statement = current.line, catch("syntax error", parseStatement, "VariableDeclaration", "FunctionDeclaration", "Comment") --[[@as StatementExpression]]
					if statement.kindof == "FunctionDeclaration" and statement.name.value == "constructor" then
						if parent then
							local firstStatement = statement.body[1]
							if not (firstStatement and firstStatement.kindof == "CallExpression" and firstStatement.caller.value == "super") then
								throw("'super' call required inside extended prototype constructor", last)
							end
						end
						if constructor then
							throw("multiple constructor implementations are not allowed", last)
						end
						constructor = true
					end
					body[#body + 1] = statement
				end
				expect("'end' expected " .. string.format((current.line > line) and "(to close 'prototype' at line %s)" or "", line), "End")
				return { kindof = "PrototypeDeclaration", name = name, parent = parent, body = body, decorations = decorations }
			-- IfStatement
			elseif typeof == "If" then
				local node = {}
				local latest = node --[[@as IfStatement]]
				repeat
					if suppose("If", "Elseif") then
						latest.kindof, latest.test, latest.consequent = "IfStatement", parseExpression(), {}
						expect("'then' missing", "Then")
					end
					repeat
						local target = latest.consequent or latest
						target[#target + 1] = parseStatement()
						if current.typeof == "Elseif" or suppose("Else") then
							latest.alternate = {}
							latest = latest.alternate
						end
					until current.typeof == "Elseif" or current.typeof == "End"
				until current.typeof == "End"
				expect("'end' expected " .. string.format((current.line > line) and "(to close 'if' at line %s)" or "", line), "End")
				return node
			-- WhileLoop
			elseif typeof == "While" then
				consume()
				local condition = parseExpression() --[[@as Expression]]
				expect("'do' expected", "Do")
				local body = {} ---@type Statement[]
				while current.typeof ~= "End" do
					body[#body + 1] = parseStatement()
				end
				expect("'end' expected " .. string.format((current.line > line) and "(to close 'while' at line %s)" or "", line), "End")
				return { kindof = "WhileLoop", condition = condition, body = body }
			-- BreakStatement
			elseif typeof == "Break" then
				consume()
				return { kindof = "BreakStatement" }
			-- ForLoop
			elseif typeof == "For" then
				consume()
				local condition ---@type NumericLoopCondition|IterationLoopCondition
				local last, initial = current.value, parseExpression() --[[@as Expression]]
				if initial.kindof == "Identifier" then
					expect("'=' expected", "Equal")
					initial = { kindof = "AssignmentExpression", left = initial, operator = "=", right = parseExpression() } --[[@as AssignmentExpression]]
					expect("'to' expected", "To")
					condition = { init = initial, goal = parseExpression(), step = suppose("Step") and parseExpression() } --[[@as NumericLoopCondition]]
				elseif initial.kindof == "RecordLiteralExpression" then
					local variable = {} ---@type Identifier[]
					for index, element in ipairs(initial.elements) do
						if element.value.kindof ~= "Identifier" or element.key then
							throw(string.format("expected <name> near record element nº %i", index))
						else
							variable[#variable + 1] = element.value
						end
					end
					expect("'in' expected", "In")
					condition = { variable = variable, iterable = parseExpression() } --[[@as IterationLoopCondition]]
				else
					throw("<name> or <record> expected near '" .. last .. "'")
				end
				expect("'do' missing", "Do")
				local body = {} ---@type StatementExpression[]
				while current.typeof ~= "End" do
					body[#body + 1] = parseStatement()
				end
				expect("'end' expected " .. string.format((current.line > line) and "(to close 'for' at line %s)" or "", line), "End")
				return { kindof = "ForLoop", condition = condition, body = body }
			-- CallExpression, NewExpression, VariableAssignment
			elseif typeof == "Identifier" or typeof == "LeftBracket" then
				local assignments = {}
				while current.typeof == "Identifier" or current.typeof == "LeftBracket" do
					local left, last = parseExpression() --[[@as Expression]], current.typeof
					local operator, right ---@type string, Expression
					if left.kindof == "CallExpression" or left.kindof == "NewExpression" then
						return left
					elseif left.kindof == "RecordLiteralExpression" then
						operator, right = expect("'=' expected", "Equal"), catch("'<record> or '...' expected", parseExpression, "RecordLiteralExpression", "Ellipsis")
					elseif left.kindof == "MemberExpression" or left.kindof == "Identifier" then
						operator, right = expect("'=' expected", "Equal", "MinusEqual", "PlusEqual", "AsteriskEqual", "SlashEqual", "CircumflexEqual", "PercentEqual"), parseExpression()
					else
						throw("syntax error near '" .. last .. "'")
					end
					assignments[#assignments + 1] = { kindof = "AssignmentExpression", left = left, operator = operator, right = right } --[[@as AssignmentExpression]]
					if not suppose("Comma") then
						break
					end
				end
				return { kindof = "VariableDeclaration", assignments = assignments }
			end
			-- Unknown
			throw("unexpected symbol near '" .. value .. "'")
		until true
	end
end

---@param source string The raw source.
---@return { kindof: string, body: StatementExpression[] } #The AST table.
return function (source, options)
	current, pop, peek = { value = "", line = 0 }, scan(source)
	current.typeof, current.value, current.line = peek()
	local ast = { kindof = "Program", body = {} }
	while current.typeof do
		ast.body[#ast.body + 1] = parseStatement()
	end
	return ast
end