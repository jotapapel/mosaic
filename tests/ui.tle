-- GEMUI
-- by @jotapapel, Dec. 2021 - Jan. 2022, Dec. 2023

import font from "./font.tle"
import graphics from "./graphics.tle"

@export @default var GEMUI = [
	"LEFT": 0, "CENTER": .5, "RIGHT": 1,
	"TOP": 0, "MIDDLE": .5, "RIGHT": 1,
	"RELATIVE": "RELATIVE", "ABSOLUTE": "ABSOLUTE"
]

-- Basic text element.
prototype GEMUI.Text {}
	var width = 0, height = 0,
		style = font.STYLE_PLAIN, lineHeight = 1,
		lines = []
	
	function constructor (content, style, lineHeight)
		self.style = style or self.style, self.lineHeight = lineHeight or self.lineHeight
		self:content(content)
	end

	@private @weak function adjust (text, width, style)
		var newText = "", newTextWidth = 0
		for index = 1 to string.len(text) do
			var char = string.sub(text, index, index), charWidth = style.WIDTH
			for [ adjWidth, adjPattern ] in pairs(style.ADJUST) do
				if string.match(char, "[" + adjPattern + "]") then
					charWidth += adjWidth
				end
			end
			if string.match(char, "[%d%u]") then
				charWidth += 1
			elseif string.match(char, "%s") and index > 1 then
				newTextWidth -= 1
			end
			if newTextWidth + charWidth - 1 <= width then
				newText = newText .. char, newTextWidth += charWidth
			else
				break
			end
		end
		return newText, newTextWidth - 1
	end

	function draw (x, y, color, align)
		var totalHeight = 0
		for [ index, line ] in ipairs(self.lines) do
			var align = align or GEMUI.LEFT, [ text, width, height ] = ...line
			var lineHeight = math.floor(height * (self.lineHeight - 1) / 2)
			if totalHeight + height + lineHeight * 2 <= self.height then
				totalHeight += height + (lineHeight * 2)
			else
				break
			end
			if width > self.width then
				[text, width] = [ adjust(self.width, text, self.style) ]
			end
			font.print(text, x + math.floor((self.width - width) * align), y + ((index - 1) * (height * self.lineHeight)) + lineHeight + 1, color or graphics.BRIGHT_WHITE, self.style)
		end
	end

	function content (content)
		self.lines = []
		string.gsub(string.format("%s\n", $content), "(.-)\n", function (line)
			var [ width, height ] = [ font.print(line, self.style) ]
			table.insert(self.lines, [ line, width, 8 ])
			self.width = math.max(self.width, width), self.height += 8 * self.lineHeight
		end)
	end
end