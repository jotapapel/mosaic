@export @abstract
prototype graphics {}
	var WIDTH = 240, HEIGHT = 136,
		SOLID = "solid", BOX = "box"
	var	BLACK = &0, BRIGHT_BLACK = &1,
		RED = &2, BRIGHT_RED = &3,
		GREEN = &4, BRIGHT_GREEN = &5,
		BLUE = &6, BRIGHT_BLUE = &7,
		CYAN = &8, BRIGHT_CYAN = &9,
		YELLOW = &A, BRIGHT_YELLOW = &B,
		GRAY = &C, BRIGHT_GRAY = &D,
		WHITE = &E, BRIGHT_WHITE = &F

	function clear (color)
		color = color or 0
		memset(&0, (color * (2 ^ 4)) + color, 16320)
	end

	function border (color)
		poke(&03FF8, color or 0)
	end

	function pal (oldcolor, newcolor)
		if oldcolor and newcolor then
			poke4(&3FF0 * 2 + oldcolor, newcolor)
			return true
		end
		for index = 0 to 15 do
			poke4(&3FF0 * 2 + index, index)
		end
	end

	function point (x, y, color)
		if color then
			poke4(&0 + (y * &F0) + x, color)
		end
		return peek4(&0 + (y * &F0) + x)
	end

	function line (x0, y0, x1, y1, color)
		var dx = math.abs(x1 - x0), sx = x0 < x1 and 1 or -1
		var dy = -math.abs(y1 - y0), sy = y0 < y1 and 1 or -1
		var err = dx + dy
		while x0 <> x1 or y0 <> y1 do
			graphics.point(x0, y0, color)
			var e = err * 2
			if e >= dy then
				err += dy, x0 += sx
			end
			if e <= dx then
				err += dx, y0 += sy
			end
		end
		graphics.point(x1, y1, color)
	end

	function rectangle (style, x1, y1, x2, y2, color, border)
		color = color or graphics.WHITE
		if style == graphics.BOX then
			for index = 0 to border or 1 do
				rectb(x1 + index, y1 + index, x2 - index * 2, y2 - index * 2, color)
			end
			return true
		elseif style == graphics.SOLID then
			rect(x1, y1, x2, y2, color)
			return true
		end
		error("Wrong drawing style", 2)
	end

	function circle (style, x, y, radius, color, border, adjust)
		var alter = (radius == 4) and 2 or 0
		if style == graphics.BOX then
			var x1 = 0, y1 = radius, decision = 3 - 2 * radius
			while x1 <= y1 do
				graphics.point(x + x1, y + y1, color)
				graphics.point(x + x1, y - y1, color)
				graphics.point(x - x1, y + y1, color)
				graphics.point(x - x1, y - y1, color)
				graphics.point(x + y1, y + x1, color)
				graphics.point(x + y1, y - x1, color)
				graphics.point(x - y1, y + x1, color)
				graphics.point(x - y1, y - x1, color)
				if decision < 0 then
					decision += (x1 * 4) + 6 + alter - (adjust or 0)
				else
					decision += 4 * (x1 - y1) + 10, y1 -= 1
				end
				x1 += 1
			end
			if border and border > 1 then
				for index = 1 to border do
					graphics.circle(graphics.BOX, x, y, radius + index, color, 1, -8)
					graphics.circle(graphics.BOX, x, y, radius + index, color, 1, -14)
				end
			end
			return true
		elseif style == graphics.SOLID then
			graphics.point(x, y, color)
			for index = radius to 0 step -1 do
				graphics.circle(graphics.BOX, x, y, index, color, 1)
				graphics.circle(graphics.BOX, x, y, index, color, 1, -8)
				if index > 1 then
					graphics.point(x - 1, y - 1, color)
					graphics.point(x - 1, y + 1, color)
					graphics.point(x + 1, y - 1, color)
					graphics.point(x + 1, y + 1, color)
				end
			end
			return true
		end
		error("Wrong drawing style", 2)
	end
end

@export @abstract
prototype font {}
	var SIZE = 8
	var STYLE_PLAIN = [
			"ADDRESS": &20,
			"WIDTH": 5,
			"ADJUST": [
				"1": "#%*%?$&%^mw",
				"-1": "\"%%%+/<>\\{}",
				"-2": "%(%),;%[%]`1jl",
				"-3": "!\'%.:|i"
			]
		],
		STYLE_BOLD = [
			"ADDRESS": &80,
			"WIDTH": 6,
			"ADJUST": [
				"3": "mw",
				"2": "#",
				"1": "%*%?MW^~",
				"-1": "%%%+/<>\\{}",
				"-2": "%(%)1,;%[%]`jl",
				"-3": "!\'%.:|i"
			]
		]

	function print (text, x, y, color, style)
		var width = 0
		style = style or (x is "table" and x) or font.STYLE_PLAIN
		graphics.pal(graphics.BRIGHT_WHITE, color or graphics.BLACK)
		for index = 1 to string.len(text) do
			var char = string.sub(text, index, index), charw = style.WIDTH
			for [adjw, adjp] in pairs(style.ADJUST) do
				if string.match(char, "[" + adjp + "]") then
					charw += adjw
				end
			end
			if string.match(char, "[%d%u]") then
				charw += 1
			elseif string.match(char, "%s") and index > 1 then
				width -= 1
			end
			if x and y and string.match(char, "%C") then
				spr(style.ADDRESS + string.byte(char) - 32, x + width, y, 0)
			end
			width += charw
		end
		graphics.pal()
		return width - 1
	end
end